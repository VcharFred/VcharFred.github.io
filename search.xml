<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[log4j2日志使用以及配置]]></title>
    <url>%2FJava%2Flog4j2%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[log4j2是log4j的升级版，官方表示其速度和性能上更强；但是在实际测试中若不使用异步日志则提升不大。 一、添加maven依赖&lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-api&lt;/artifactId&gt; &lt;version&gt;2.11.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.11.1&lt;/version&gt; &lt;/dependency&gt; a.如果现有组件使用Log4j 1.x并且您希望将此日志记录路由到Log4j 2，则删除所有log4j 1.x依赖项并添加以下内容&lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-1.2-api&lt;/artifactId&gt; &lt;version&gt;2.11.1&lt;/version&gt; &lt;/dependency&gt; b.如果现有组件使用Apache Commons Logging 1.x并且您希望将此日志记录路由到Log4j 2，则添加以下内容但不删除任何Commons Logging 1.x依赖项。&lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-jcl&lt;/artifactId&gt; &lt;version&gt;2.11.1&lt;/version&gt; &lt;/dependency&gt; c.如果现有组件使用SLF4J并且您希望将此日志记录路由到Log4j 2，则添加以下内容但不删除任何SLF4J依赖项&lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt; &lt;version&gt;2.11.1&lt;/version&gt; &lt;/dependency&gt; d.如果现有组件使用Java Util Logging并且您希望将此日志记录路由到Log4j 2，则添加以下内容&lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-jul&lt;/artifactId&gt; &lt;version&gt;2.11.1&lt;/version&gt; &lt;/dependency&gt; 二、使用public class Demo { private static Logger logger = LogManager.getLogger(Demo.class); public static void main(String[] args){ logger.trace(&quot;------trace---追踪级别，就是程序推进以下，一般不使用&quot;); logger.debug(&quot;------debug---调试级别&quot;); logger.info(&quot;-------info----普通级别&quot;); logger.warn(&quot;-------warn----警告级别&quot;); logger.error(&quot;------error---错误级别&quot;); logger.fatal(&quot;------fatal---严重级别，程序已经无法运行或应该停止的情况下&quot;); } } 三、配置log4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台。 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;Configuration status=&quot;OFF&quot;&gt; &lt;/Configuration&gt; 3.1 Configuration 节点 status 打印log4j自身的日志级别配置 OFF 关闭 输出日志级别 All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF 如： #关闭 &lt;?xml version=”1.0” encoding=”UTF-8”?&gt; #输出日志 &lt;?xml version=”1.0” encoding=”UTF-8”?&gt; monitorInterval 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;Configuration status=&quot;ERROR&quot; monitorInterval=&quot;20&quot;&gt; ... &lt;/Configuration&gt; 3.2 Appenders节点常见的有三种子节点:Console、RollingFile、File Console节点用来定义输出到控制台的Appender. name:指定Appender的名字. target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT. PatternLayout:输出格式，不设置默认为:%m%n File节点用来定义输出到指定位置的文件的Appender. name:指定Appender的名字. fileName:指定输出日志的目的文件带全路径的文件名. PatternLayout:输出格式，不设置默认为:%m%n. RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender. name:指定Appender的名字. fileName:指定输出日志的目的文件带全路径的文件名. PatternLayout:输出格式，不设置默认为:%m%n. filePattern:指定新建日志文件的名称格式. Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志. TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am. SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小. DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性),默认7个。 3.3 Loggers节点常见的有两种:Root和Logger. Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出 level:日志输出级别，共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF. AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender. Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。 level:日志输出级别，共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF. name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点. AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity=&quot;false&quot;只在自定义的Appender中进行输出。 四、配置示例以下示例输出INFO级别日志且到达指定大小后删除旧的的日志，ERROR级别日志按月归档分类 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!--配置根节点Configuration信息 status ：打印log4j自身的日志级别； OFF 关闭 输出日志级别 All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF monitorInterval ：用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s --&gt; &lt;Configuration status=&quot;ERROR&quot; monitorInterval=&quot;86400&quot;&gt; &lt;!-- 变量配置 --&gt; &lt;Properties&gt; &lt;!--输入路径--&gt; &lt;Property name=&quot;ROOT_PATH&quot; value=&quot;./home/logs&quot;/&gt; &lt;Property name=&quot;INFO_LOG_PATH&quot; value=&quot;${ROOT_PATH}/info&quot;/&gt; &lt;Property name=&quot;ERROR_LOG_PATH&quot; value=&quot;${ROOT_PATH}/error&quot;/&gt; &lt;!--输出日志的格式--&gt; &lt;Property name=&quot;Console_OUT_PATTERN&quot; value=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level 类名:%logger{80} 方法名:%M:%L %msg%n&quot;/&gt; &lt;Property name=&quot;File_OUT_PATTERN&quot; value=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%-5level] %logger{80}.%M:%L %msg%n&quot;/&gt; &lt;/Properties&gt; &lt;Appenders&gt; &lt;!--输出控制台的配置--&gt; &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt; &lt;!--日志过滤：控制台只输出level(info)及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt; &lt;ThresholdFilter level=&quot;INFO&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt; &lt;!--输出日志的格式--&gt; &lt;PatternLayout pattern=&quot;${File_OUT_PATTERN}&quot;/&gt; &lt;/Console&gt; &lt;!--普通日志：每个日志1GB, 总共15个，大概保留15天的日志--&gt; &lt;RollingFile name=&quot;INFO_LOG&quot; fileName=&quot;${INFO_LOG_PATH}/info.log&quot; filePattern=&quot;${INFO_LOG_PATH}/oldInfoLogs/info-%i.log&quot;&gt; &lt;!--日志过滤：ERROR--&gt; &lt;ThresholdFilter level=&quot;INFO&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt; &lt;!--输出日志的格式--&gt; &lt;PatternLayout pattern=&quot;${File_OUT_PATTERN}&quot;/&gt; &lt;Policies&gt; &lt;!--每个日志大小：1GB--&gt; &lt;SizeBasedTriggeringPolicy size=&quot;10KB&quot;/&gt; &lt;/Policies&gt; &lt;!--限制日志个数：15--&gt; &lt;DefaultRolloverStrategy max=&quot;15&quot;/&gt; &lt;/RollingFile&gt; &lt;!--错误日志：按月归档--&gt; &lt;RollingFile name=&quot;ERROR_LOG&quot; fileName=&quot;${ERROR_LOG_PATH}/error.log&quot; filePattern=&quot;${ERROR_LOG_PATH}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log&quot;&gt; &lt;!--日志过滤：ERROR--&gt; &lt;ThresholdFilter level=&quot;ERROR&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt; &lt;!--输出日志的格式--&gt; &lt;PatternLayout pattern=&quot;${File_OUT_PATTERN}&quot;/&gt; &lt;Policies&gt; &lt;TimeBasedTriggeringPolicy/&gt; &lt;!--每个日志大小：500MB--&gt; &lt;SizeBasedTriggeringPolicy size=&quot;500MB&quot;/&gt; &lt;/Policies&gt; &lt;!--限制日志个数：80，基本保证每天的错误日志能够存下来--&gt; &lt;DefaultRolloverStrategy max=&quot;80&quot;/&gt; &lt;/RollingFile&gt; &lt;/Appenders&gt; &lt;Loggers&gt; &lt;!--指定某个包下的日志级别，同时受全局日志级别影响--&gt; &lt;Logger name=&quot;top.vchar.demo.log4j2.test&quot; level=&quot;ERROR&quot;/&gt; &lt;!--全局日志级别--&gt; &lt;Root level=&quot;INFO&quot;&gt; &lt;AppenderRef ref=&quot;Console&quot;/&gt; &lt;AppenderRef ref=&quot;INFO_LOG&quot;/&gt; &lt;AppenderRef ref=&quot;ERROR_LOG&quot;/&gt; &lt;/Root&gt; &lt;/Loggers&gt; &lt;/Configuration&gt; 测试示例package top.vchar.demo.log4j2; import org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger; /** * &lt;p&gt; 使用样例 &lt;/p&gt; * * @author vchar fred * @version 1.0 * @create_date 2019/1/21 14:11 */ public class Demo { private static Logger logger = LogManager.getLogger(Demo.class); public static void main(String[] args) throws InterruptedException { int i=0; long s = System.currentTimeMillis(); while (i++&lt;100000){ print(); } System.out.println((System.currentTimeMillis()-s)); } private static void print(){ logger.trace(&quot;------trace---追踪级别，就是程序推进以下，一般不使用&quot;); logger.debug(&quot;------debug---调试级别&quot;); logger.info(&quot;-------info----普通级别&quot;); logger.warn(&quot;-------warn----警告级别&quot;); logger.error(&quot;------error---错误级别&quot;); logger.fatal(&quot;------fatal---严重级别，程序已经无法运行或应该停止的情况下&quot;); System.out.println(&quot;-------------------end--------------------------&quot;); } } 五、其他在web项目中，需要在web.xml文件中配置log4j2的配置文件路径；如下： &lt;!--log4j2配置--&gt; &lt;context-param&gt; &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:log4j2.xml&lt;/param-value&gt; &lt;/context-param&gt;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[log4日志配置]]></title>
    <url>%2FJava%2Flog4%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[log4j由于其简单的配置和使用，现在大多数人都还在使用中。 log4j已经停止更新了，官方建议升级到log4j2版本 一、添加maven依赖&lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; &lt;!--log4j扩展工具，非必须--&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;apache-log4j-extras&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; 二、log4j.properties配置文件配置示例2.1、INFO级别的配置log4j.rootLogger = INFO, CONSOLE, I, E ### 输出到控制台 ### log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender log4j.appender.CONSOLE.Target = System.out log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout log4j.appender.CONSOLE.layout.ConversionPattern = %d{[yyyy-MM-dd HH:mm:ss,SSS]} [%5p] [%c:%L] - %m%n ### 输出INFO级别以上的日志到文件中 ### log4j.appender.I = org.apache.log4j.RollingFileAppender log4j.appender.I.File = ./logs/project_name/info/log_info.log log4j.appender.I.Append = true #单个日志大小500M log4j.appender.I.MaxFileSize=500MB #总共备份10GB log4j.appender.I.MaxBackupIndex=20 ## 输出INFO级别以上的日志 log4j.appender.I.Threshold = INFO log4j.appender.I.layout = org.apache.log4j.PatternLayout log4j.appender.I.layout.ConversionPattern = %d{[yyyy-MM-dd HH:mm:ss,SSS]} [%5p] [%c:%L] - %m%n ### 保存异常信息到单独文件 ### log4j.appender.E = org.apache.log4j.DailyRollingFileAppender ## 异常日志文件名 log4j.appender.E.File = ${catalina.home}/logs/project_name/error/log_error.log log4j.appender.E.Append = true #每半天生成一个日志文件 log4j.appender.E.DatePattern = &apos;.&apos;yyyy-MM-dd-a ## 只输出ERROR级别以上的日志!!! log4j.appender.E.Threshold = ERROR log4j.appender.E.layout = org.apache.log4j.PatternLayout log4j.appender.E.layout.ConversionPattern = %d{[yyyy-MM-dd HH:mm:ss,SSS]} [%5p] [%c:%L] - %m%n 2.2、DEBUG级别的日志配置log4j.rootLogger = DEBUG, CONSOLE, D, I, E ### 输出到控制台 log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender log4j.appender.CONSOLE.Target = System.out log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout log4j.appender.CONSOLE.layout.ConversionPattern = %d{[yyyy-MM-dd HH:mm:ss,SSS]} [%5p] [%c:%L] - %m%n ### 输出DEBUG级别以上的日志到文件中 仅测试时使用，正式部署请将这里的注释掉### log4j.appender.D = org.apache.log4j.RollingFileAppender #日志放到tomcat的bin目录下 log4j.appender.D.File = ./logs/project_name/debug/log_debug.log #单个日志大小32M log4j.appender.D.MaxFileSize=32MB #总共备份64M log4j.appender.D.MaxBackupIndex=2 log4j.appender.D.Append = true ## 输出DEBUG级别以上的日志 log4j.appender.D.Threshold = DEBUG log4j.appender.D.layout = org.apache.log4j.PatternLayout log4j.appender.D.layout.ConversionPattern = %d{[yyyy-MM-dd HH:mm:ss,SSS]} [%5p] [%c:%L] - %m%n ### 输出INFO级别以上的日志到文件中 ### log4j.appender.I = org.apache.log4j.RollingFileAppender #日志放到tomcat的logs目录中 log4j.appender.I.File = home/admin/logs/project_name/info/log_info.log log4j.appender.I.Append = true #单个日志大小32M log4j.appender.I.MaxFileSize=32MB #总共备份512M log4j.appender.I.MaxBackupIndex=16 ## 输出INFO级别以上的日志 log4j.appender.I.Threshold = INFO log4j.appender.I.layout = org.apache.log4j.PatternLayout log4j.appender.I.layout.ConversionPattern = %d{[yyyy-MM-dd HH:mm:ss,SSS]} [%5p] [%c:%L] - %m%n ### 保存异常信息到单独文件 log4j.appender.E = org.apache.log4j.DailyRollingFileAppender #日志放到tomcat的logs目录中 log4j.appender.E.File = ${catalina.home}/logs/project_name/error/log_error.log log4j.appender.E.Append = true #每天生成一个日志文件 log4j.appender.E.DatePattern = &apos;.&apos;yyyy-MM-dd ## 只输出ERROR级别以上的日志!!! log4j.appender.E.Threshold = ERROR log4j.appender.E.layout = org.apache.log4j.PatternLayout log4j.appender.E.layout.ConversionPattern = %d{[yyyy-MM-dd HH:mm:ss,SSS]} [%5p] [%c:%L] - %m%n 额外的说明：这里使用了${catalina.home}来获取tomcat的路径，让日志输出到tomcat的logs文件目录下。 一些注意事项：低级别日志也会输出比它级别高的日志; 根据日期来设置日志的无法设置文件个数 补充：指定某个包下或类的日志级别log4j.logger.包路径=日志级别 #例如：只打印spring的错误日志 log4j.logger.org.springframework=ERROR 三、使用import org.apache.log4j.Logger; public class Demo { private static Logger logger = Logger.getLogger(Demo.class); public static void main(String[] args){ logger.trace(&quot;------trace---追踪级别，一般不使用&quot;); logger.debug(&quot;------debug---调试级别&quot;); logger.info(&quot;-------info----普通级别&quot;); logger.warn(&quot;-------warn----警告级别&quot;); logger.error(&quot;------error---错误级别&quot;); logger.fatal(&quot;------fatal---严重级别，程序已经无法运行或应该停止的情况下&quot;); System.out.println(&quot;-------------------控制台输出--------------------------&quot;); } }]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo相关配置和安装]]></title>
    <url>%2F%E5%85%B6%E4%BB%96%2Fhexo%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%92%8C%E5%AE%89%E8%A3%85.html</url>
    <content type="text"><![CDATA[hexo相关配置和安装一、安装hexo模块npm install -g hexo-cli npm install -g hexo npm install hexo-server --save 部署到GitHub。 npm install hexo-deployer-git --save 安装相关模块 npm install 二、配置hexo修改_config.yml是 skip_render: README.md deploy: type: git repo: https://github.com/vcharfred/vcharfred.github.io.git branch: masterskip_render是配置忽略的文件 md中设置配置 title: Hello World date: 2013-07-14 17:01:34 categories: - foo - bar 将指定文章置顶；需要置顶文章的 front-matter 中，添加 top: true 即可置顶 三、hexo相关命令hexo init 初始化目录 hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本 hexo clean 清除 hexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy hexo s -g #生成并本地预览 hexo d -g #生成并上传 四、插件npm install hexo-helper-post-top --save 五、next主题下载地址 https://github.com/theme-next/hexo-theme-next/releases 下载后将压缩包解压放到\themes\next目录中 1.修改站点配置文件 theme: next 六、语法--- title: hexo相关配置和安装 date: 2019/4/22 20:46:25 categories: - other tags: - hexo ---]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
